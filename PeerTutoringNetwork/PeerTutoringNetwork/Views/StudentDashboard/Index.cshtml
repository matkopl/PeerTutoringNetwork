@model PeerTutoringNetwork.Viewmodels.StudentDashboardVM

@{
    ViewData["Title"] = "Student Dashboard";
    Layout = "_Layout";
}

<div class="container">
    <h1 class="text-center"><i class="fas fa-user-graduate"></i> Student Dashboard</h1>

    <!-- Quick Actions -->
    <div class="row text-center mb-4">
        <div class="col-md-6">
            <button class="btn btn-primary" onclick="window.location.href='/Profile.html'">
                <i class="fas fa-user"></i> View Profile
            </button>
        </div>
        <div class="col-md-6">
            <button class="btn btn-danger" onclick="logout()">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </div>
    </div>

    <hr>

    <!-- Your Reservations -->
    <h3><i class="fas fa-calendar-check"></i> Your Reservations</h3>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Appointment ID</th>
                <th>Mentor</th>
                <th>Subject</th>
                <th>Date & Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reservation in Model.Reservations)
            {
                <tr>
                    <td>@reservation.AppointmentId</td>
                    <td>@reservation.MentorUsername</td>
                    <td>@reservation.SubjectName</td>
                    <td>@reservation.ReservationTime.ToString("yyyy-MM-dd HH:mm")</td>
                </tr>
            }
        </tbody>
    </table>

    <hr>

    <!-- Available Appointments -->
    <h3><i class="fas fa-calendar-alt"></i> Available Appointments</h3>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Appointment ID</th>
                <th>Mentor</th>
                <th>Subject</th>
                <th>Date & Time</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in Model.AvailableAppointments)
            {
                <tr>
                    <td>@appointment.AppointmentId</td>
                    <td>@appointment.MentorUsername</td>
                    <td>@appointment.SubjectName</td>
                    <td>@appointment.AppointmentDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <form method="post" action="/Reservations/Create" class="reserve-form">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="AppointmentId" value="@appointment.AppointmentId" />
                            <input type="hidden" name="StudentId" id="StudentId" />
                            <input type="hidden" name="ReservationTime" id="ReservationTime" />
                            <button type="button" class="btn btn-success reserve-btn">
                                <i class="fas fa-plus"></i> Reserve
                            </button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script type="module">
    import jwt_decode from "https://cdn.jsdelivr.net/npm/jwt-decode/build/jwt-decode.esm.js";

    const token = localStorage.getItem("jwtToken");
    if (!token) {
        alert("You are not logged in!");
        window.location.href = "/Login.html";
    }

    function getUserIdFromToken(token) {
        try {
            const decoded = jwt_decode(token);
            return decoded && decoded.userId ? { userId: parseInt(decoded.userId, 10) } : null;
        } catch (error) {
            console.error("Error decoding token:", error.message);
            return null;
        }
    }

    function logout() {
        localStorage.removeItem("jwtToken");
        alert("Successfully logged out!");
        window.location.href = "/Login.html";
    }

    document.addEventListener("DOMContentLoaded", () => {
        const token = localStorage.getItem("jwtToken");
        const userInfo = getUserIdFromToken(token);

        if (!userInfo) {
            alert("Invalid session. Please log in again.");
            window.location.href = "/Login.html";
            return;
        }

        document.querySelectorAll(".reserve-form").forEach((form) => {
            form.querySelector("#StudentId").value = userInfo.userId;
            form.querySelector("#ReservationTime").value = new Date().toISOString();
        });

        document.querySelectorAll(".reserve-btn").forEach((button) => {
            button.addEventListener("click", (e) => {
                const form = e.target.closest(".reserve-form");
                const formData = new FormData(form);

                fetch(form.action, {
                    method: "POST",
                    body: formData,
                    headers: {
                        "RequestVerificationToken": form.querySelector("input[name='__RequestVerificationToken']").value,
                    },
                })
                    .then((response) => {
                        if (response.ok) {
                            alert("Appointment reserved successfully!");
                            location.reload();
                        } else {
                            return response.text().then((text) => {
                                alert("Failed to reserve appointment: " + text);
                            });
                        }
                    })
                    .catch((error) => console.error("Error reserving appointment:", error));
            });
        });


        window.logout = logout;
    });
</script>
